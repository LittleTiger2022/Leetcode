// 
public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
         int bits = 0;
         int mask = 1;
        for (int i=0;i<32;i++) {
            if ((n & mask )!=0) {
                bits++;
            }
                mask <<= 1; // shift one bit left 010 - > 100
        }
                return bits;
    }
}

//
public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        int ones = 0;
        while (n!=0) {
            ones = ones + (n & 1);
            n = n >>> 1; // unsigned shift
        }
        return ones;
    }
}
//
public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
           int count = 0;
    for(int i = 0; i < 32; i++){
        count += (n >> i & 1);
    }
    return count;
    }
}
